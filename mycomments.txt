My notes, written along while learning and experimenting for review

Basics
1) Create blank Django Project in VS
2) Use Virtual Environment (Solutions Explorer -> Right Click on Pyth Env)
3) Test if it works properly: in cmd do "python manage.py runserver (opt: port)"; in VS Ctrl+F5 works instead
4) Create an app: in cmd do "python manage.py startapp <app name>"; in VS I had to use the Solution Explorer to add it
5) This creates a folder with the app name. Note: manage.py, <app name> Folder and Django folder should be in the same directory
6) in views.py added "from django.http import HttpResponse" to serve HTTP Requests on the functions defined
7) Define Functions for each View
8) in <app name>\urls.py we have to add redirects: "from django.urls import path, from . import views" urlpatterns = [ path()] etc
9) settings.py add our appname under INSTALLED_APPS
10) in the base url.py add ", include" to imports, add the paths for the url
11) urlpatterns accepts things like "<int:id>" or "<str:name>" as well

Migrating
In the CMD line: "python manage.py makemigrations, then "python manage.py migrate"
This does not work in Visual Studio (non-Code, that is), and needs to be done via right click on  -> Python -> Django

DBs
In models.py add the classes, can inherit from imported Django Models
- After adding the models, remember to migrate the changes via "python manage.py makemigrations <app name>" & migrate command

We can now create objects, even in the shell like this:
- "python manage.py shell" to start the shell
- t = ToDoList(name="My List") (creating the object as usual but with assigned parameter)
- t.save() to save it
- now we can list all objects via belonging to the ToDoList class with ToDoList.objects.all() or specific ones via id (ToDoList.objects.get(id=1))
- also search them via ToDoList.objects.get(name="My List")
- t.item_set.all() will show an empty placeholder list at first because Items are the FKs for it
- t.item_set.create(text="Do this thing", complete=False), t.item_set.all() shows all entries
- as above, t.item_set.get(id=1) etc will show the appropriate items
- .filter(name__startswith="My") to search for objects starting with "My"
- del_object = t.get(id=2) followed by del_object.delete() to delete


Admin Panel
- python manage.py createsuperuser (again VS needs the right click stuff instead)
- import the ToDoList in admin.py, then admin.site.register(ToDoList) so we can see it on the admin site

Template Inheritance (HTML)
Path should be <app name>\Templates\<app name>\ (VS creates this by default it seems)
- Created the base.html, extended it to home.html
- adjust the functions in views.py to return render(response, "path/to.html", {})
- Templates can use {{variables}}, these need to be added to views.py in the {}^ as well, i.e. {"name": "Home Page"}
- {% content block %} {% endblock %} works similarily and lets the html page that uses the extend fill in (so the base.html doesn't have a var it doesn't want to use)
- blocks allow default values as well, i.e. {% title block %}Default Value{% endblock %} 

Adding forms
- create forms.py, import forms from django
- create the class and import it in views.py

Hiding the SECRET_KEY on GitHub:
- Not sharing the SECRET_KEY in settings.py is a given if uploading to GitHub *and* intending to run it pubicly. 
Warning: if it already got shared once, consider it a) compromised and b) the gitignore doesn't seem to work if it already got pushed (?)
How to: 
1) create .env file in the same folder as manage.py, *cut* content SECRET KEY = "<key" from settings.py
2) create .gitignore, content ".env"
3) in settings.py: from decouple import config SECRET_KEY = config("SECRET_KEY")
4) install and add modules to requirements as such:
pip install python-decouple
pip freeze > requirements.txt
VS can update requirements.txt via right click

Other stuff:
DEFAULT_AUTO_FIELD='django.db.models.AutoField' to avoid the warnings; probably better to actually create Classes with proper Primary Keys instead on a real app